// Game controller script attached to the background game object (which has colliders for each egg area)

using UnityEngine;
using System.Collections;

[RequireComponent(typeof(AudioSource))]

public class Matching : MonoBehaviour
{
	public GameObject egg1Prefab, egg2Prefab, chickPrefab1, chickPrefab2, chickPrefab3, restartButton;
	public GameObject[] eggs = new GameObject[6];
	public GUIText timer, bestDisplay;
	public Collider2D[] colliders = new Collider2D[6];

	private GameObject[] chickClones = new GameObject[6];
	private GameObject[] chicksRevealed = new GameObject[2];
	private GameObject[] eggsDestroyed = new GameObject[2];
	private Collider2D[] collidersDisabled = new Collider2D[2];
	private int timePassed, startTime, reveals = 0, matches = 0;
	private static int bestTime = 100;
	private bool paused = false;

	void Start()
	{
		startTime = (int)Time.time;
		restartButton.SetActive(false);
		restartButton.layer = 2;
		if (bestTime != 100) {bestDisplay.text = "Best time: " + bestTime;}
		//eggs[0] = Instantiate(egg1Prefab, eggs[0].transform.position, transform.rotation) as GameObject;
		//eggs[1] = Instantiate(egg2Prefab, eggs[1].transform.position, transform.rotation) as GameObject;
		//eggs[2] = Instantiate(egg1Prefab, eggs[2].transform.position, transform.rotation) as GameObject;
		//eggs[3] = Instantiate(egg2Prefab, eggs[3].transform.position, transform.rotation) as GameObject;
		//eggs[4] = Instantiate(egg1Prefab, eggs[4].transform.position, transform.rotation) as GameObject;
		//eggs[5] = Instantiate(egg2Prefab, eggs[5].transform.position, transform.rotation) as GameObject;

		randomize();
	}

	void OnMouseDown()
	{
		// Get click position to hatch appropriate egg
		Vector3 mouseWorldPoint = Camera.main.ScreenToWorldPoint(Input.mousePosition);

		//Check location of click to determine which spot was clicked
		if (mouseWorldPoint.x < -2 && mouseWorldPoint.y > 0) 		{mouseHitSpot(0);}
		else if (mouseWorldPoint.y < 0 && mouseWorldPoint.x < -2) 	{mouseHitSpot(3);}
		else if (mouseWorldPoint.x < 2 && mouseWorldPoint.y > 0)	{mouseHitSpot(1);}
		else if (mouseWorldPoint.x < 2 && mouseWorldPoint.y < 0) 	{mouseHitSpot(4);}
		else if (mouseWorldPoint.y > 0) 							{mouseHitSpot(2);}
		else 														{mouseHitSpot(5);}
		
		// Only play sound when listening is not paused, otherwise sound will get queued and play at wrong time
		if (!AudioListener.pause) {audio.Play();}

		reveals++;
		StartCoroutine("checkMatch");
	}

	void mouseHitSpot(int spot)
	{
		colliders[spot].enabled = false;
		chickClones[spot].SetActive(true);
		chicksRevealed[reveals] = chickClones[spot];
		eggsDestroyed[reveals] = eggs[spot];
		collidersDisabled[reveals] = colliders[spot];
		eggs[spot].SetActive(false);
	}

	void OnGUI()
	{
		if (paused == false)
		{
			timePassed = (int)Time.time - startTime;
			timePassed %= 60;
			timer.text = timePassed.ToString();
		}
	}

	IEnumerator checkMatch()
	{
		// Set layer to ignore raycast (clicks) while match checking happens
		this.gameObject.layer = 2;
		if (reveals == 2)
		{
			if (chicksRevealed[0].GetComponent<SpriteRenderer>().sprite == 
				chicksRevealed[1].GetComponent<SpriteRenderer>().sprite)
			{
				//match!
				matches++;
			}
			else
			{
				//no match, wait to let player memorize, then replace chicks with eggs
				yield return new WaitForSeconds(1.0f);
				chicksRevealed[0].SetActive(false);
				chicksRevealed[1].SetActive(false);
				eggsDestroyed[0].SetActive(true);
				eggsDestroyed[1].SetActive(true);
				collidersDisabled[0].enabled = true;
				collidersDisabled[1].enabled = true;
			}
			reveals = 0;	
		}
		// Game won
		if (matches == 3)
		{
			restartButton.SetActive(true);
			restartButton.layer = 0;
			if (timePassed < bestTime)
			{
				bestDisplay.text = "Best time: " + timePassed.ToString();
				bestTime = timePassed;
			}
			paused = true;
		}
		// Game not won, reset layer to pick up clicks
		else {this.gameObject.layer = 0;}	
	}

	void randomize()
	{
		System.Random rand = new System.Random();
		int whichColor, count1 = 0, count2 = 0, count3 = 0, i = 0;
		bool iterationIsValid;

		while (count1 != 2 || count2 != 2 || count3 != 2)
		{
			//print(count1 + "\n" + count2 + "\n" + count3);
			whichColor = rand.Next(1,4);
			iterationIsValid = false;
			if (whichColor == 1 && count1 < 2) 
			{
				iterationIsValid = true;
				chickClones[i] = Instantiate(chickPrefab1, eggs[i].transform.position, transform.rotation) as GameObject;
				count1++;
			}
			else if (whichColor == 2 && count2 < 2)
			{
				iterationIsValid = true;
				chickClones[i] = Instantiate(chickPrefab2, eggs[i].transform.position, transform.rotation) as GameObject;
				count2++;
			}
			else if (whichColor == 3 && count3 < 2)
			{
				iterationIsValid = true;
				chickClones[i] = Instantiate(chickPrefab3, eggs[i].transform.position, transform.rotation) as GameObject;
				count3++;
			}
			if (iterationIsValid)
			{
				chickClones[i].SetActive(false);
				i++;
			}
		}
	}
}