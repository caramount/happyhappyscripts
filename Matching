// Game controller script attached to the background game object (which has colliders for each egg area)

using UnityEngine;
using System.Collections;

[RequireComponent(typeof(AudioSource))]

// Code for a "Best Time" display is commented out (per izzy's suggestion) but I'm leaving it in case 
// you ever want to enable it, there is a best time object in the scene hierarchy set up for this
public class Matching : MonoBehaviour
{
	public GameObject eggPrefab1, eggPrefab2, eggPrefab3, restartButton;
	public GameObject[] nests = new GameObject[6];
	public GUIText timer, bestDisplay;
	public Collider2D[] colliders = new Collider2D[6];

	public int hop;

	private GameObject[] eggClones = new GameObject[6];
	private GameObject[] eggsRevealed = new GameObject[2];
	private Collider2D[] collidersDisabled = new Collider2D[2];
	private bool[] eggPopping = new bool[6];
	private int timePassed, startTime, reveals = 0, matches = 0;
	//private static int bestTime = 100;
	private bool paused = false;

	// For egg popping up animation
	private Vector3 scale = new Vector3(0.1f, 0.1f, 1f);
	private Vector3 startSize = new Vector3(0.1f, 0.1f, 1f);
	private	Vector3 endSize = new Vector3(0.7f, 0.7f, 1f);

	void Start()
	{
		startTime = (int)Time.time;
		//if (bestTime != 100) {bestDisplay.text = "Best time: " + bestTime;}
		randomize();
	}

	void Update()
	{
		// Check each boolean in eggPopping[6] to see if the corresponding egg should be animated and
		// if so apply animation for that frame by adding scale to egg's localScale value
		for (int i = 0; i < 6; i++)
		{
			if (eggPopping[i])
			{
				eggClones[i].transform.localScale += scale;
				if (eggClones[i].transform.localScale.x >= endSize.x) eggPopping[i] = false;
			}
		}
	}

	void OnMouseDown()
	{
		// Get click position to hatch appropriate egg
		Vector3 mouseWorldPoint = Camera.main.ScreenToWorldPoint(Input.mousePosition);

		//Check location of click to determine which spot was clicked
		if (mouseWorldPoint.x < -2 && mouseWorldPoint.y > 0) 		{mouseHitSpot(0);}
		else if (mouseWorldPoint.y < 0 && mouseWorldPoint.x < -2) 	{mouseHitSpot(3);}
		else if (mouseWorldPoint.x < 2 && mouseWorldPoint.y > 0)	{mouseHitSpot(1);}
		else if (mouseWorldPoint.x < 2 && mouseWorldPoint.y < 0) 	{mouseHitSpot(4);}
		else if (mouseWorldPoint.y > 0) 							{mouseHitSpot(2);}
		else 														{mouseHitSpot(5);}
		
		// Only play sound when listening is not paused, otherwise sound will get queued and play at wrong time
		if (!AudioListener.pause) {audio.Play();}

		reveals++;
		StartCoroutine("checkMatch");
	}

	void mouseHitSpot(int spot)
	{
		// Turn off collider so nest can't be clicked again before match checking happens
		colliders[spot].enabled = false;
		// Make egg visible and set boolean so it will animate in Update()
		eggClones[spot].SetActive(true);
		eggPopping[spot] = true;
		// Store egg so it can be bounced or made to disappear after checking happens
		eggsRevealed[reveals] = eggClones[spot];
		// Store collider so it can be re-enabled if no match
		collidersDisabled[reveals] = colliders[spot];
	}

	// This gets called every graphics rendering cycle, so multiple times a second
	void OnGUI()
	{
		// Timer code
		if (paused == false)
		{
			timePassed = (int)Time.time - startTime;
			timePassed %= 60;
			timer.text = timePassed.ToString();
		}
	}

	IEnumerator checkMatch()
	{
		// Set layer to ignore raycast (clicks/touches) while match checking happens
		this.gameObject.layer = 2;
		if (reveals == 2)
		{
			if (eggsRevealed[0].GetComponent<SpriteRenderer>().sprite == 
				eggsRevealed[1].GetComponent<SpriteRenderer>().sprite)
			{
				//match!
				// Make eggs hop
				eggsRevealed[0].GetComponent<Rigidbody2D>().gravityScale = 2;
				eggsRevealed[1].GetComponent<Rigidbody2D>().gravityScale = 2;				
				eggsRevealed[0].GetComponent<Rigidbody2D>().velocity = Vector2.up * hop;
				eggsRevealed[1].GetComponent<Rigidbody2D>().velocity = Vector2.up * hop;
				// Results in inconsistent landing height (cuz floats probably), but it's ok
				yield return new WaitForSeconds((float)(hop/10.347f));
				eggsRevealed[0].GetComponent<Rigidbody2D>().gravityScale = 0;
				eggsRevealed[1].GetComponent<Rigidbody2D>().gravityScale = 0;
				eggsRevealed[0].GetComponent<Rigidbody2D>().velocity = Vector2.up * 0;
				eggsRevealed[1].GetComponent<Rigidbody2D>().velocity = Vector2.up * 0;

				matches++;
			}
			else
			{
				//no match, wait to let player memorize, then remove eggs
				yield return new WaitForSeconds(1.0f);
				eggsRevealed[0].SetActive(false);
				eggsRevealed[1].SetActive(false);
				eggsRevealed[0].transform.localScale = startSize;
				eggsRevealed[1].transform.localScale = startSize;
				collidersDisabled[0].enabled = true;
				collidersDisabled[1].enabled = true;
			}	
			reveals = 0;
		}
		// Game won
		if (matches == 3)
		{
			restartButton.SetActive(true);
			restartButton.layer = 0;
			//if (timePassed < bestTime)
			//{
			//	bestDisplay.text = "Best time: " + timePassed.ToString();
			//	bestTime = timePassed;
			//}
			paused = true;
		}
		// Game not won, reset layer to notice clicks
		else {this.gameObject.layer = 0;}	
	}

	// Randomizes the nests
	void randomize()
	{
		System.Random rand = new System.Random();
		int whichColor, count1 = 0, count2 = 0, count3 = 0, i = 0;
		bool iterationIsValid;

		while (count1 != 2 || count2 != 2 || count3 != 2)
		{
			//print(count1 + "\n" + count2 + "\n" + count3);
			whichColor = rand.Next(1,4);
			iterationIsValid = false;
			if (whichColor == 1 && count1 < 2) 
			{
				iterationIsValid = true;
				eggClones[i] = Instantiate(eggPrefab1, nests[i].transform.position, transform.rotation) as GameObject;
				count1++;
			}
			else if (whichColor == 2 && count2 < 2)
			{
				iterationIsValid = true;
				eggClones[i] = Instantiate(eggPrefab2, nests[i].transform.position, transform.rotation) as GameObject;
				count2++;
			}
			else if (whichColor == 3 && count3 < 2)
			{
				iterationIsValid = true;
				eggClones[i] = Instantiate(eggPrefab3, nests[i].transform.position, transform.rotation) as GameObject;
				count3++;
			}
			if (iterationIsValid)
			{
				eggClones[i].SetActive(false);
				i++;
			}
		}
	}
}